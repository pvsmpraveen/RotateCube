// Generated by psc-bundle 0.11.6
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showString"] = showString;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                       
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s), 
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();                                                   
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 68, column 1 - line 68, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["Newtype"] = Newtype;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 36, column 1 - line 36, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });                                                                                                     
  var fromRight = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar62) {
                  return $dollar62;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Right) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Either line 252, column 1 - line 252, column 52: " + [ v.constructor.name ]);
          })());
      };
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 229, column 1 - line 229, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["fromRight"] = fromRight;
  exports["functorEither"] = functorEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["MonadThrow"] = MonadThrow;
  exports["throwError"] = throwError;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var except = function (dictApplicative) {
      return function ($96) {
          return ExceptT(Control_Applicative.pure(dictApplicative)($96));
      };
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["except"] = except;
  exports["mapExceptT"] = mapExceptT;
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                                                           
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  exports["runExcept"] = runExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
    "use strict";

  exports.eventListener = function (fn) {
    return function (event) {
      return fn(event)();
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.addEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
    "use strict";

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";          

  exports.cos = Math.cos;    

  exports.sin = Math.sin;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Math"];
  exports["cos"] = $foreign.cos;
  exports["pi"] = $foreign.pi;
  exports["sin"] = $foreign.sin;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return new NonEmpty(f(v.value0), Data_Functor.map(dictFunctor)(f)(v.value1));
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["functorNonEmpty"] = functorNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($143) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($143));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 78, column 12 - line 80, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = function ($copy_acc) {
              return function ($copy_v) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, v) {
                      if (v instanceof Nil) {
                          $tco_done = true;
                          return acc;
                      };
                      if (v instanceof Cons) {
                          $tco_var_acc = new Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 73, column 15 - line 75, column 33: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return function ($144) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)($144));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 94, column 1 - line 94, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, function ($149) {
      return NonEmptyList(Data_NonEmpty.singleton(plusList)($149));
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var singleton = function ($160) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($160));
  };
  exports["singleton"] = singleton;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var fail = function ($121) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($121));
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Data.Foreign line 104, column 1 - line 104, column 55: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  exports["TypeMismatch"] = TypeMismatch;
  exports["fail"] = fail;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["toForeign"] = $foreign.toForeign;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                               
  var readMouseEvent = Data_Foreign.unsafeReadTagged("MouseEvent");
  exports["readMouseEvent"] = readMouseEvent;
})(PS["DOM.Event.Types"] = PS["DOM.Event.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.EventTarget"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Prelude = PS["Prelude"];
  exports["addEventListener"] = $foreign.addEventListener;
  exports["eventListener"] = $foreign.eventListener;
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
    "use strict";

  exports.clientX = function (e) {
    return e.clientX;
  };

  exports.clientY = function (e) {
    return e.clientY;
  };
})(PS["DOM.Event.MouseEvent"] = PS["DOM.Event.MouseEvent"] || {});
(function(exports) {
    "use strict";        

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                                          
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.MouseEvent"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];                                                                                 
  var eventToMouseEvent = function ($0) {
      return DOM_Event_Types.readMouseEvent(Data_Foreign.toForeign($0));
  };
  exports["eventToMouseEvent"] = eventToMouseEvent;
  exports["clientX"] = $foreign.clientX;
  exports["clientY"] = $foreign.clientY;
})(PS["DOM.Event.MouseEvent"] = PS["DOM.Event.MouseEvent"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports._readHTMLElement = function (failure) {
    return function (success) {
      return function (value) {
        var tag = Object.prototype.toString.call(value);
        if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
          return success(value);
        } else {
          return failure(tag);
        }
      };
    };
  };
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Util_FFI = PS["DOM.Util.FFI"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];       
  var elementToEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["elementToEventTarget"] = elementToEventTarget;
})(PS["DOM.Node.Types"] = PS["DOM.Node.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                                     
  var readHTMLElement = $foreign._readHTMLElement(function ($0) {
      return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(Data_Either.Left.create(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Data_Foreign.TypeMismatch.create("HTMLElement")($0))));
  })(function ($1) {
      return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(Data_Either.Right.create($1));
  });                                                       
  var htmlElementToElement = Unsafe_Coerce.unsafeCoerce;
  var htmlDocumentToParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["htmlDocumentToParentNode"] = htmlDocumentToParentNode;
  exports["htmlElementToElement"] = htmlElementToElement;
  exports["readHTMLElement"] = readHTMLElement;
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };

  exports._requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_WebStorage_Types = PS["DOM.WebStorage.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var RequestAnimationFrameId = function (x) {
      return x;
  };
  var requestAnimationFrame = function (fn) {
      return function ($31) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(RequestAnimationFrameId)($foreign._requestAnimationFrame(fn)($31));
      };
  };
  exports["requestAnimationFrame"] = requestAnimationFrame;
  exports["document"] = $foreign.document;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";                                             

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Node.ParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var querySelector = function (qs) {
      return function ($3) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._querySelector(qs)($3));
      };
  };
  exports["querySelector"] = querySelector;
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              var v = $foreign.save(ctx)();
              var v1 = action();
              var v2 = $foreign.restore(ctx)();
              return v1;
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              var v = $foreign.beginPath(ctx)();
              var v1 = path();
              var v2 = $foreign.fill(ctx)();
              return v1;
          };
      };
  };
  exports["fillPath"] = fillPath;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["withContext"] = withContext;
  exports["beginPath"] = $foreign.beginPath;
  exports["clearRect"] = $foreign.clearRect;
  exports["closePath"] = $foreign.closePath;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["stroke"] = $foreign.stroke;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Coroutine_Aff = PS["Control.Coroutine.Aff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_Event_MouseEvent = PS["DOM.Event.MouseEvent"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_ParentNode = PS["DOM.Node.ParentNode"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Point = function (x) {
      return x;
  };
  var DCosine = function (x) {
      return x;
  };
  var Cube = function (x) {
      return x;
  };
  var yPoint = function (v) {
      return function (v1) {
          var yz = v.y * $$Math.cos(v1.c) - v.x * $$Math.sin(v1.c);
          var yzx = yz * $$Math.cos(v1.a) + v.z * $$Math.sin(v1.a);
          var zzx = v.z * $$Math.cos(v1.a) - yz * $$Math.sin(v1.a);
          var xz = v.x * $$Math.cos(v1.c) + v.y * $$Math.sin(v1.c);
          var xzy = xz * $$Math.cos(v1.b) + zzx * $$Math.sin(v1.b);
          return 350.0 + yzx;
      };
  };
  var xPoint = function (v) {
      return function (v1) {
          var yz = v.y * $$Math.cos(v1.c) - v.x * $$Math.sin(v1.c);
          var yzx = yz * $$Math.cos(v1.a) + v.z * $$Math.sin(v1.a);
          var zzx = v.z * $$Math.cos(v1.a) - yz * $$Math.sin(v1.a);
          var xz = v.x * $$Math.cos(v1.c) + v.y * $$Math.sin(v1.c);
          var xzy = xz * $$Math.cos(v1.b) + zzx * $$Math.sin(v1.b);
          return 350.0 + xzy;
      };
  };
  var withStroke = function (ctx) {
      return function (color) {
          return function (draw) {
              return Graphics_Canvas.withContext(ctx)(function __do() {
                  var v = Graphics_Canvas.setStrokeStyle(color)(ctx)();
                  var v1 = Graphics_Canvas.beginPath(v)();
                  var v2 = draw(v1)();
                  var v3 = Graphics_Canvas.closePath(v2)();
                  return Graphics_Canvas.stroke(v3)();
              });
          };
      };
  };
  var subb = function (x) {
      return function (y) {
          var $79 = x <= y;
          if ($79) {
              return x;
          };
          return y;
      };
  };
  var projectiontPoint = function (v) {
      return function (v1) {
          var yz = v.y * $$Math.cos(v1.c) - v.x * $$Math.sin(v1.c);
          var yzx = yz * $$Math.cos(v1.a) + v.z * $$Math.sin(v1.a);
          var zzx = v.z * $$Math.cos(v1.a) - yz * $$Math.sin(v1.a);
          var xz = v.x * $$Math.cos(v1.c) + v.y * $$Math.sin(v1.c);
          var xzy = xz * $$Math.cos(v1.b) + zzx * $$Math.sin(v1.b);
          return {
              x: 350.0 + xzy, 
              y: 350.0 + yzx, 
              z: 0.0
          };
      };
  };
  var p8 = {
      x: 100.0, 
      y: 100.0, 
      z: 100.0
  };
  var p7 = {
      x: 100.0, 
      y: -100.0, 
      z: 100.0
  };
  var p6 = {
      x: 100.0, 
      y: 100.0, 
      z: -100.0
  };
  var p5 = {
      x: 100.0, 
      y: -100.0, 
      z: -100.0
  };
  var p4 = {
      x: -100.0, 
      y: 100.0, 
      z: 100.0
  };
  var p3 = {
      x: -100.0, 
      y: -100.0, 
      z: 100.0
  };
  var p2 = {
      x: -100.0, 
      y: 100.0, 
      z: -100.0
  };
  var p1 = {
      x: -100.0, 
      y: -100.0, 
      z: -100.0
  };
  var min = function (x) {
      return function (y) {
          var $88 = x <= y;
          if ($88) {
              return x;
          };
          return y;
      };
  };
  var max = function (x) {
      return function (y) {
          var $89 = x >= y;
          if ($89) {
              return x;
          };
          return y;
      };
  };
  var loopAnimation = function (window) {
      return function (ref) {
          return function (state) {
              return function (step) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(DOM_HTML_Window.requestAnimationFrame(function __do() {
                      loopAnimation(window)(ref)(state)(step)();
                      var v = Control_Monad_Eff_Ref.readRef(ref)();
                      var v1 = step(v)();
                      return Control_Monad_Eff_Ref.writeRef(ref)(v1)();
                  })(window));
              };
          };
      };
  };
  var withAnimation = function (state) {
      return function (step) {
          return function __do() {
              var v = DOM_HTML.window();
              var v1 = Control_Monad_Eff_Ref.newRef(state)();
              return loopAnimation(v)(v1)(state)(step)();
          };
      };
  };
  var drawLine = function (ctx) {
      return function (v) {
          return function (v1) {
              return function __do() {
                  var v2 = Graphics_Canvas.moveTo(ctx)(v.x)(v.y)();
                  return Graphics_Canvas.lineTo(v2)(v1.x)(v1.y)();
              };
          };
      };
  };
  var redrawCube = function (ctx) {
      return function (v) {
          return function (v1) {
              var rotation = {
                  a: v1.a, 
                  b: v1.b, 
                  c: v1.c
              };
              var pp1 = projectiontPoint(p1)(rotation);
              var pp2 = projectiontPoint(p2)(rotation);
              var pp3 = projectiontPoint(p3)(rotation);
              var pp4 = projectiontPoint(p4)(rotation);
              var pp5 = projectiontPoint(p5)(rotation);
              var pp6 = projectiontPoint(p6)(rotation);
              var pp7 = projectiontPoint(p7)(rotation);
              var pp8 = projectiontPoint(p8)(rotation);
              var pp1x = xPoint(p1)(rotation);
              var pp1y = yPoint(p1)(rotation);
              var pp2x = xPoint(p2)(rotation);
              var pp2y = yPoint(p2)(rotation);
              var pp3x = xPoint(p3)(rotation);
              var pp3y = yPoint(p3)(rotation);
              var pp4x = xPoint(p4)(rotation);
              var pp4y = yPoint(p4)(rotation);
              var pp5x = xPoint(p5)(rotation);
              var pp5y = yPoint(p5)(rotation);
              var pp6x = xPoint(p6)(rotation);
              var pp6y = yPoint(p6)(rotation);
              var pp7x = xPoint(p7)(rotation);
              var pp7y = yPoint(p7)(rotation);
              var pp8x = xPoint(p8)(rotation);
              var pp8y = yPoint(p8)(rotation);
              return function __do() {
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFillStyle("#0820E4")(ctx))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.fillPath(ctx)(function __do() {
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp1x)(pp1y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp5x)(pp5y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp6x)(pp6y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp2x)(pp2y))();
                      return Graphics_Canvas.closePath(ctx)();
                  }))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFillStyle("#0820D4")(ctx))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.fillPath(ctx)(function __do() {
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp3x)(pp3y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp7x)(pp7y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp8x)(pp8y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp4x)(pp4y))();
                      return Graphics_Canvas.closePath(ctx)();
                  }))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFillStyle("#0820C4")(ctx))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.fillPath(ctx)(function __do() {
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp5x)(pp5y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp7x)(pp7y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp8x)(pp8y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp6x)(pp6y))();
                      return Graphics_Canvas.closePath(ctx)();
                  }))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFillStyle("#0820B4")(ctx))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.fillPath(ctx)(function __do() {
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp1x)(pp1y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp5x)(pp5y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp7x)(pp7y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp3x)(pp3y))();
                      return Graphics_Canvas.closePath(ctx)();
                  }))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFillStyle("#0820A4")(ctx))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.fillPath(ctx)(function __do() {
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp1x)(pp1y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp2x)(pp2y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp4x)(pp4y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp3x)(pp3y))();
                      return Graphics_Canvas.closePath(ctx)();
                  }))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFillStyle("#0820A4")(ctx))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.fillPath(ctx)(function __do() {
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp2x)(pp2y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp6x)(pp6y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp8x)(pp8y))();
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(ctx)(pp4x)(pp4y))();
                      return Graphics_Canvas.closePath(ctx)();
                  }))();
                  return withStroke(ctx)("#8E9FEA")(function (ctx2) {
                      return function __do() {
                          var v2 = drawLine(ctx2)(pp1)(pp5)();
                          var v3 = drawLine(v2)(pp5)(pp6)();
                          var v4 = drawLine(v3)(pp6)(pp2)();
                          var v5 = drawLine(v4)(pp2)(pp1)();
                          var v6 = drawLine(v5)(pp7)(pp8)();
                          var v7 = drawLine(v6)(pp8)(pp4)();
                          var v8 = drawLine(v7)(pp5)(pp7)();
                          var v9 = drawLine(v8)(pp6)(pp8)();
                          return drawLine(v9)(pp2)(pp4)();
                      };
                  })();
              };
          };
      };
  };
  var cube = {
      color: "rgb(33,64,205)", 
      originX: 0.0, 
      originY: 0.0, 
      originZ: 0.0
  };
  var clearCanvas = function (canvas) {
      return function __do() {
          var v = Graphics_Canvas.getCanvasWidth(canvas)();
          var v1 = Graphics_Canvas.getCanvasHeight(canvas)();
          var v2 = Graphics_Canvas.getContext2D(canvas)();
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.clearRect(v2)({
              x: 0.0, 
              y: 0.0, 
              w: v, 
              h: v1
          }))();
      };
  };
  var withAnimateContext = function (name) {
      return function (state) {
          return function (draw) {
              return function __do() {
                  var v = Graphics_Canvas.getCanvasElementById(name)();
                  if (v instanceof Data_Maybe.Just) {
                      var v1 = Graphics_Canvas.getContext2D(v.value0)();
                      return withAnimation(state)(function (state1) {
                          return function __do() {
                              clearCanvas(v.value0)();
                              return draw(v1)(state1)();
                          };
                      })();
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Unit.unit;
                  };
                  throw new Error("Failed pattern match at Main line 237, column 3 - line 243, column 25: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var initialCubeState = (function () {
      var state = {
          a: $$Math.pi / 4.0, 
          b: $$Math.pi / 3.0, 
          c: $$Math.pi / 4.0
      };
      var canvas = Graphics_Canvas.getCanvasElementById("thecanvas");
      return withAnimateContext("thecanvas")(state)(function (ctx) {
          return function (state1) {
              return function __do() {
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(redrawCube(ctx)(cube)({
                      a: state1.a, 
                      b: state1.b, 
                      c: state1.c
                  }))();
                  var $123 = {};
                  for (var $124 in state1) {
                      if ({}.hasOwnProperty.call(state1, $124)) {
                          $123[$124] = state1[$124];
                      };
                  };
                  $123.a = state1.a;
                  $123.b = state1.b;
                  $123.c = state1.c;
                  return $123;
              };
          };
      });
  })();
  var leftX = function (loop) {
      var state = {
          a: $$Math.pi / 4.0, 
          b: $$Math.pi / 3.0, 
          c: $$Math.pi / 4.0, 
          loop: loop
      };
      var canvas = Graphics_Canvas.getCanvasElementById("thecanvas");
      return withAnimateContext("thecanvas")(state)(function (ctx) {
          return function (state1) {
              return function __do() {
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(redrawCube(ctx)(cube)({
                      a: state1.a, 
                      b: state1.b, 
                      c: state1.c
                  }))();
                  var $126 = {};
                  for (var $127 in state1) {
                      if ({}.hasOwnProperty.call(state1, $127)) {
                          $126[$127] = state1[$127];
                      };
                  };
                  $126.c = state1.c;
                  $126.b = state1.b;
                  $126.a = state1.a + min(0.0)(state1.loop);
                  $126.loop = min(0.0)(state1.loop) + 5.0e-4;
                  return $126;
              };
          };
      });
  };
  var leftY = function (loop) {
      var state = {
          a: $$Math.pi / 4.0, 
          b: $$Math.pi / 3.0, 
          c: $$Math.pi / 4.0, 
          loop: loop
      };
      var canvas = Graphics_Canvas.getCanvasElementById("thecanvas");
      return withAnimateContext("thecanvas")(state)(function (ctx) {
          return function (state1) {
              return function __do() {
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(redrawCube(ctx)(cube)({
                      a: state1.a, 
                      b: state1.b, 
                      c: state1.c
                  }))();
                  var $129 = {};
                  for (var $130 in state1) {
                      if ({}.hasOwnProperty.call(state1, $130)) {
                          $129[$130] = state1[$130];
                      };
                  };
                  $129.a = state1.a;
                  $129.c = state1.c;
                  $129.b = state1.b + min(0.0)(state1.loop);
                  $129.loop = min(0.0)(state1.loop) + 5.0e-4;
                  return $129;
              };
          };
      });
  };
  var leftZ = function (loop) {
      var state = {
          a: $$Math.pi / 4.0, 
          b: $$Math.pi / 3.0, 
          c: $$Math.pi / 4.0, 
          loop: loop
      };
      var canvas = Graphics_Canvas.getCanvasElementById("thecanvas");
      return withAnimateContext("thecanvas")(state)(function (ctx) {
          return function (state1) {
              return function __do() {
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(redrawCube(ctx)(cube)({
                      a: state1.a, 
                      b: state1.b, 
                      c: state1.c
                  }))();
                  var $132 = {};
                  for (var $133 in state1) {
                      if ({}.hasOwnProperty.call(state1, $133)) {
                          $132[$133] = state1[$133];
                      };
                  };
                  $132.a = state1.a;
                  $132.b = state1.b;
                  $132.c = state1.c + min(0.0)(state1.loop);
                  $132.loop = min(0.0)(state1.loop) + 5.0e-4;
                  return $132;
              };
          };
      });
  };
  var rightX = function (loop) {
      var state = {
          a: $$Math.pi / 4.0, 
          b: $$Math.pi / 3.0, 
          c: $$Math.pi / 4.0, 
          loop: loop
      };
      var canvas = Graphics_Canvas.getCanvasElementById("thecanvas");
      return withAnimateContext("thecanvas")(state)(function (ctx) {
          return function (state1) {
              return function __do() {
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(redrawCube(ctx)(cube)({
                      a: state1.a, 
                      b: state1.b, 
                      c: state1.c
                  }))();
                  var $135 = {};
                  for (var $136 in state1) {
                      if ({}.hasOwnProperty.call(state1, $136)) {
                          $135[$136] = state1[$136];
                      };
                  };
                  $135.c = state1.c;
                  $135.b = state1.b;
                  $135.a = state1.a + max(0.0)(state1.loop);
                  $135.loop = max(0.0)(state1.loop) - 5.0e-4;
                  return $135;
              };
          };
      });
  };
  var rightY = function (loop) {
      var state = {
          a: $$Math.pi / 4.0, 
          b: $$Math.pi / 3.0, 
          c: $$Math.pi / 4.0, 
          loop: loop
      };
      var canvas = Graphics_Canvas.getCanvasElementById("thecanvas");
      return withAnimateContext("thecanvas")(state)(function (ctx) {
          return function (state1) {
              return function __do() {
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(redrawCube(ctx)(cube)({
                      a: state1.a, 
                      b: state1.b, 
                      c: state1.c
                  }))();
                  var $138 = {};
                  for (var $139 in state1) {
                      if ({}.hasOwnProperty.call(state1, $139)) {
                          $138[$139] = state1[$139];
                      };
                  };
                  $138.a = state1.a;
                  $138.c = state1.c;
                  $138.b = state1.b + max(0.0)(state1.loop);
                  $138.loop = max(0.0)(state1.loop) - 5.0e-4;
                  return $138;
              };
          };
      });
  };
  var rightZ = function (loop) {
      var state = {
          a: $$Math.pi / 4.0, 
          b: $$Math.pi / 3.0, 
          c: $$Math.pi / 4.0, 
          loop: loop
      };
      var canvas = Graphics_Canvas.getCanvasElementById("thecanvas");
      return withAnimateContext("thecanvas")(state)(function (ctx) {
          return function (state1) {
              return function __do() {
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(redrawCube(ctx)(cube)({
                      a: state1.a, 
                      b: state1.b, 
                      c: state1.c
                  }))();
                  var $141 = {};
                  for (var $142 in state1) {
                      if ({}.hasOwnProperty.call(state1, $142)) {
                          $141[$142] = state1[$142];
                      };
                  };
                  $141.a = state1.a;
                  $141.b = state1.b;
                  $141.c = state1.c + max(0.0)(state1.loop);
                  $141.loop = max(0.0)(state1.loop) - 5.0e-4;
                  return $141;
              };
          };
      });
  };
  var letsRotate = function (dxx) {
      return function (dyy) {
          var $144 = dxx === 0.0 && dyy === 0.0;
          if ($144) {
              return initialCubeState;
          };
          var $145 = dxx >= 0.0 && dxx <= 75.0;
          if ($145) {
              var $146 = dyy >= 0.0;
              if ($146) {
                  return rightX(0.2);
              };
              return leftZ(-0.2);
          };
          var $147 = dyy >= 0.0 && dyy <= 50.0;
          if ($147) {
              return rightY(0.2);
          };
          var $148 = dxx <= 0.0 && dxx >= -100.0;
          if ($148) {
              var $149 = dyy <= 0.0;
              if ($149) {
                  return leftX(-0.2);
              };
              return rightZ(0.2);
          };
          var $150 = dyy >= -50.0 && dyy <= 0.0;
          if ($150) {
              return leftY(-0.2);
          };
          var $151 = dxx >= 0.0 && dxx <= 50.0;
          if ($151) {
              return rightX(0.2);
          };
          var $152 = dxx >= -50.0 && dxx <= 0.0;
          if ($152) {
              return leftX(-0.2);
          };
          var $153 = dxx <= 0.0;
          if ($153) {
              return rightZ(0.2);
          };
          return leftZ(-0.2);
      };
  };
  var onMouse = function (dictPartial) {
      return function (canvas) {
          return function (holdRef) {
              return function (x1) {
                  return function (y1) {
                      return function (x2) {
                          return function (y2) {
                              return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                  DOM_Event_EventTarget.addEventListener("mousedown")(DOM_Event_EventTarget.eventListener(function (event) {
                                      return function __do() {
                                          Control_Monad_Eff_Ref.modifyRef(holdRef)(function (h) {
                                              return 1;
                                          })();
                                          Control_Monad_Eff_Ref.modifyRef(x1)(function (m) {
                                              return Data_Int.toNumber(DOM_Event_MouseEvent.clientX(Data_Either.fromRight(dictPartial)(Control_Monad_Except.runExcept(DOM_Event_MouseEvent.eventToMouseEvent(event)))));
                                          })();
                                          Control_Monad_Eff_Ref.modifyRef(y1)(function (m) {
                                              return Data_Int.toNumber(DOM_Event_MouseEvent.clientY(Data_Either.fromRight(dictPartial)(Control_Monad_Except.runExcept(DOM_Event_MouseEvent.eventToMouseEvent(event)))));
                                          })();
                                          var v = Control_Monad_Eff_Ref.readRef(holdRef)();
                                          Control_Monad_Eff_Console.logShow(Data_Show.showInt)(v)();
                                          var v1 = Control_Monad_Eff_Ref.readRef(x1)();
                                          var v2 = Control_Monad_Eff_Ref.readRef(y1)();
                                          Control_Monad_Eff_Console.logShow(Data_Show.showNumber)(v1)();
                                          Control_Monad_Eff_Console.logShow(Data_Show.showNumber)(v2)();
                                          Control_Monad_Eff_Console.logShow(Data_Show.showString)("mousedown")();
                                          return initialCubeState();
                                      };
                                  }))(false)(DOM_Node_Types.elementToEventTarget(DOM_HTML_Types.htmlElementToElement(canvas)))();
                                  return DOM_Event_EventTarget.addEventListener("mouseup")(DOM_Event_EventTarget.eventListener(function (event) {
                                      return function __do() {
                                          Control_Monad_Eff_Ref.modifyRef(holdRef)(function (h) {
                                              return h + 1 | 0;
                                          })();
                                          Control_Monad_Eff_Ref.modifyRef(x2)(function (m) {
                                              return Data_Int.toNumber(DOM_Event_MouseEvent.clientX(Data_Either.fromRight(dictPartial)(Control_Monad_Except.runExcept(DOM_Event_MouseEvent.eventToMouseEvent(event)))));
                                          })();
                                          Control_Monad_Eff_Ref.modifyRef(y2)(function (m) {
                                              return Data_Int.toNumber(DOM_Event_MouseEvent.clientY(Data_Either.fromRight(dictPartial)(Control_Monad_Except.runExcept(DOM_Event_MouseEvent.eventToMouseEvent(event)))));
                                          })();
                                          var v = Control_Monad_Eff_Ref.readRef(holdRef)();
                                          Control_Monad_Eff_Console.logShow(Data_Show.showInt)(v)();
                                          var v1 = Control_Monad_Eff_Ref.readRef(x1)();
                                          var v2 = Control_Monad_Eff_Ref.readRef(y1)();
                                          var v3 = Control_Monad_Eff_Ref.readRef(x2)();
                                          var v4 = Control_Monad_Eff_Ref.readRef(y2)();
                                          Control_Monad_Eff_Console.logShow(Data_Show.showNumber)(v1)();
                                          Control_Monad_Eff_Console.logShow(Data_Show.showNumber)(v2)();
                                          Control_Monad_Eff_Console.logShow(Data_Show.showNumber)(v3)();
                                          Control_Monad_Eff_Console.logShow(Data_Show.showNumber)(v4)();
                                          Control_Monad_Eff_Ref.modifyRef(x1)(function (m) {
                                              return m - v3;
                                          })();
                                          Control_Monad_Eff_Ref.modifyRef(y1)(function (m) {
                                              return m - v4;
                                          })();
                                          var v5 = Control_Monad_Eff_Ref.readRef(x1)();
                                          var v6 = Control_Monad_Eff_Ref.readRef(y1)();
                                          Control_Monad_Eff_Console.logShow(Data_Show.showNumber)(v5)();
                                          Control_Monad_Eff_Console.logShow(Data_Show.showNumber)(v6)();
                                          return letsRotate(v5)(v6)();
                                      };
                                  }))(false)(DOM_Node_Types.elementToEventTarget(DOM_HTML_Types.htmlElementToElement(canvas)))();
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  var userDefinedMouseEventListener = Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
      var v = Control_Monad_Eff_Ref.newRef(0)();
      var v1 = Control_Monad_Eff_Ref.newRef(0.0)();
      var v2 = Control_Monad_Eff_Ref.newRef(0.0)();
      var v3 = Control_Monad_Eff_Ref.newRef(0.0)();
      var v4 = Control_Monad_Eff_Ref.newRef(0.0)();
      var v5 = (function __do() {
          var $173 = Control_Bind.bind(Control_Monad_Eff.bindEff)(DOM_HTML.window)(DOM_HTML_Window.document)();
          return DOM_Node_ParentNode.querySelector("#thecanvas")(DOM_HTML_Types.htmlDocumentToParentNode($173))();
      })();
      var mPicker = Control_Bind.bind(Data_Maybe.bindMaybe)(v5)(function (v6) {
          return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Control_Monad_Except.runExcept(DOM_HTML_Types.readHTMLElement(Data_Foreign.toForeign(v6))));
      });
      if (mPicker instanceof Data_Maybe.Nothing) {
          return Data_Unit.unit;
      };
      if (mPicker instanceof Data_Maybe.Just) {
          return onMouse()(mPicker.value0)(v)(v1)(v2)(v3)(v4)();
      };
      throw new Error("Failed pattern match at Main line 407, column 3 - line 409, column 56: " + [ mPicker.constructor.name ]);
  });
  var main = Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
      userDefinedMouseEventListener();
      return initialCubeState();
  });
  exports["Cube"] = Cube;
  exports["DCosine"] = DCosine;
  exports["Point"] = Point;
  exports["clearCanvas"] = clearCanvas;
  exports["cube"] = cube;
  exports["drawLine"] = drawLine;
  exports["initialCubeState"] = initialCubeState;
  exports["leftX"] = leftX;
  exports["leftY"] = leftY;
  exports["leftZ"] = leftZ;
  exports["letsRotate"] = letsRotate;
  exports["loopAnimation"] = loopAnimation;
  exports["main"] = main;
  exports["max"] = max;
  exports["min"] = min;
  exports["onMouse"] = onMouse;
  exports["p1"] = p1;
  exports["p2"] = p2;
  exports["p3"] = p3;
  exports["p4"] = p4;
  exports["p5"] = p5;
  exports["p6"] = p6;
  exports["p7"] = p7;
  exports["p8"] = p8;
  exports["projectiontPoint"] = projectiontPoint;
  exports["redrawCube"] = redrawCube;
  exports["rightX"] = rightX;
  exports["rightY"] = rightY;
  exports["rightZ"] = rightZ;
  exports["subb"] = subb;
  exports["userDefinedMouseEventListener"] = userDefinedMouseEventListener;
  exports["withAnimateContext"] = withAnimateContext;
  exports["withAnimation"] = withAnimation;
  exports["withStroke"] = withStroke;
  exports["xPoint"] = xPoint;
  exports["yPoint"] = yPoint;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
